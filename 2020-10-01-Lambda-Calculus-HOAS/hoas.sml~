(*
1. Define the substitution function subst : string * hlam -> hlam -> hlam. The expression subst ("x",u) e should replace every free occurance of the variable "x" in e with u. The tricky case is how does one handle the HL f case. HINT subst (x,u) (HL f) is HL fp where fp inp is essentially f inp but for substituting x by u.
*)


(*
2. Notice that the substitution did not have to worry about the variable bound by the lambda and is simpler than the one defined for standard lambda calculus representation. However building a lambda term is difficult. Define the function abstract : string -> hlam -> hlam that essentially builds the HOAS term for λ x . M, i.e. if mh : hlam is the HOAS representation of M, then abstract "x" mh should give the HOAS representation for λ x . M. HINT The HOAS for λ x . M is given HL f, where f is that function that takes a HOAS nh : hlam and gives the HOAS term obtained by substituting "x" with nh in mh. Use part 2 to complete the assignment.
*)

(*
3. Define a function freshen : hlam -> string which will generate a string that does not occur free in its input. For example, for something like HL (fn t => HA (t , HV "x")) it can generate any string but the string "x". If we have a way to compute the free variables of hlam one can use that. However, the freshen is easier. free : hlam -> list string. Write a helper function freeP : hlam -> list string such that for all t : hlam freeP t ∩ FV(t) = ∅. Idea is when one sees FV(HAb f) ⊂ f (HV "x").
*)

(*
4. Give a conversion functions hoas : lam -> hlam syntax : hlam -> lam. In both cases handling the constructor associated with with lambda abstraction is difficult.
*)
